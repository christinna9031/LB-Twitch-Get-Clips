[extension_name]
Get a top clip

[insert_external]
<div><p>Twitch Get Clips extension is installed.</p></div>
<!--
 * @name: Twitch Get Clips, @version: 1.6, @author: Christinna#9031, FelkonEx
 * @link: https://github.com/christinna9031/LB-Twitch-Get-Clips
 * -->

[insert_command]
lioranboardclient.send('{\
  "type":"MESSAGE",\
  "topic":"ExtensionCommand",\
  "name":"Twitch Get Clips",\
  "boxcount":5,\
  "boxname1":"broadcaster_name",\
  "boxtype1":"string",\
  "boxname2":"oauth_token",\
  "boxtype2":"string",\
  "boxname3":"amount",\
  "boxtype3":"string",\
  "boxname4":"timeframe|day|week|month|year|any|",\
  "boxtype4":"string",\
  "boxname5":"variable",\
  "boxtype5":"string"\
}');

[insert_hook]
case "TwitchGetClips": {
  LBGetTopClip(LioranBoardJSON.oauth_token, LioranBoardJSON.broadcaster_name, LioranBoardJSON.amount, LioranBoardJSON.timeframe, LioranBoardJSON.variable)
} break

[insert_script]
function LBGetTopClip(oauthtoken, broadcastername, amount, timeframe, variable) {
  LBStackDelete(variable)
  if (amount == 0 || amount == "") {
    amount = 1 //if someone requests 0 clips, it auto defaults to 1
  } else if (amount > 100) {
    amount = 100 //if someone requests more than 100 clips, change it back to 100
  }

  //function to execute when various errors come up
  function LBError(msg) {
    msg = "Top Clip Extension: " + msg;
    lioranboardclient.send('{"type":"MESSAGE","topic":"SetValue","valuename":"' + variable + '","value":"error","real":false}');
    lioranboardclient.send('{"type":"MESSAGE","topic":"AlertMessage","message":"' + msg + '"}');
  }

  //send request to Twitch to fetch the broadcaster's ID
  const fetchID = fetch('https://api.twitch.tv/helix/users?login=' + broadcastername, {
    'headers': {
      'Client-ID': TWITCH_CLIENT_ID,
      'Authorization': `Bearer ${oauthtoken}`
    }
  });


  //handle Twitch response and errors
  fetchID.then(response => {
      if (response.status == 200) {
        return ((response.json()));
      } else if (response.status == 401) {
        LBError("Error. Bad OAuth token.");
        return ("error");
      } else {
        LBError("Error. User ID not found or Twitch server unavailable.");
        return ("error");
      }
    })

    .then(data => {
      //console.log(data)
      if (data !== "error") {
        if (data.data.length > 0) {
          let user_id = data.data[0].id;
          getvideos(user_id);
        } else {
          LBError("User not found.");
        }
      }
    });

  //send request to Twitch for x amount of top clips 
  function getvideos(user_id) {

    //set-up start & end timeframe to fetch clips between.
    // Defaults start to 10 years if "any" specified
    // Times use RFC3339 format.
    
    let now = new Date();
    let endedAt = new Date().toISOString();

    switch(timeframe) {
      case "day":
        now.setDate(now.getDate() - 1);
        break;
      case "week":
        now.setDate(now.getDate() - 7);
        break;
      case "month":
        now.setDate(now.getDate() - 31);
        break;
      case "year":
        now.setDate(now.getDate() - 365);
        break;
      default:
        now.setDate(now.getDate() - 3650);
    }
    let startedAt = now.toISOString();

    const fetchvideos = fetch(
      'https://api.twitch.tv/helix/clips?broadcaster_id=' + user_id + 
      '&first=' + amount + 
      '&started_at=' + startedAt + 
      '&ended_at=' + endedAt 
      ,{
        'headers': {
          'Client-ID': TWITCH_CLIENT_ID,
          'Authorization': `Bearer ${oauthtoken}`
        }
      }
    );

    //process Twitch response
    fetchvideos.then(response => {
      if (response.status == 200) {
        return ((response.json()));
      } else if (response.status == 404 || response.status == 422) {
        LBError("No clips found.");
        return ("error");
      } else {
        LBError("Error. Invalid request, too many requests or Twitch server unavailable.");
        return ("error");
      }

    }).then(data => {
      if (data !== "error") {
        //console.log(data)
        if (data.data.length == 0) {
          LBError("No clips found.");
        } else {
          if (data.data.length > 1) {
            for (let clip_number = 0; clip_number < data.data.length; clip_number++) {
              let clip_url = data.data[clip_number].id;
              variable_n = variable + clip_number;
              lioranboardclient.send('{"type":"MESSAGE","topic":"AddStack","name":"' + variable + '","position":"top","value":"' + clip_url + '"}');
            }
          } else {
            let clip_url = data.data[0].id;
            lioranboardclient.send('{"type":"MESSAGE","topic":"SetValue","valuename":"' + variable + '","value":"' + clip_url + '","real":false}');
          }
        }
      }
    })
  }
}

[insert_over]
[force]
version="1.44"
[buttons_1x0]
activepress="0.000000"
border_size="0.000000"
combine="0.000000"
type="websocketaction+pubsubaction+"
picture=""
text="hide clip"
color="12632256.000000"
button_id="51.000000"
extensiontrigger0="Hide Clip"
pubsubaction0="7.000000"
pubsubqueue="0.000000"
websocketdelay4="0.000000"
websocketvalue8_4=""
websocketvalue7_4=""
websocketvalue6_4=""
websocketvalue5_4=""
websocketvalue4_4=""
websocketvalue3_4=""
websocketvalue2_4=""
websocketvalue1_4="You can play with the delay here if it's triggering the button too soon. "
websocketaction4="92.000000"
websocketdelay3="0.000000"
websocketvalue8_3=""
websocketvalue7_3=""
websocketvalue6_3=""
websocketvalue5_3=""
websocketvalue4_3=""
websocketvalue3_3=""
websocketvalue2_3=""
websocketvalue1_3="This way you can automatically hide the browser source after the clip stops playing. "
websocketaction3="92.000000"
websocketdelay2="0.000000"
websocketvalue8_2=""
websocketvalue7_2=""
websocketvalue6_2=""
websocketvalue5_2=""
websocketvalue4_2=""
websocketvalue3_2=""
websocketvalue2_2=""
websocketvalue1_2="start automatically counting down. Once it reaches 0, it will send þHideClipþ extension trigger. "
websocketaction2="92.000000"
websocketdelay1="0.000000"
websocketvalue8_1=""
websocketvalue7_1=""
websocketvalue6_1=""
websocketvalue5_1=""
websocketvalue4_1=""
websocketvalue3_1=""
websocketvalue2_1=""
websocketvalue1_1="As soon as you execute þSend to Extension: Get Clip Lengthþ command, it will take the clip length and"
websocketaction1="92.000000"
websocketdelay0="0.000000"
websocketvalue8_0=""
websocketvalue7_0=""
websocketvalue6_0=""
websocketvalue5_0=""
websocketvalue4_0=""
websocketvalue3_0="false"
websocketvalue2_0="YOUR BROWSER NAME"
websocketvalue1_0="YOUR SCENE NAME"
websocketaction0="11.000000"
[buttons_0x0]
activepress="0.000000"
border_size="0.000000"
combine="0.000000"
type="websocketaction+"
picture=""
text="random clip"
color="12632256.000000"
button_id="19.000000"
websocketdelay22="0.000000"
websocketvalue8_22=""
websocketvalue7_22=""
websocketvalue6_22=""
websocketvalue5_22=""
websocketvalue4_22=""
websocketvalue3_22=""
websocketvalue2_22=""
websocketvalue1_22="no need to use clear stack command, extension will do it automatically"
websocketaction22="92.000000"
websocketdelay21="0.000000"
websocketvalue8_21=""
websocketvalue7_21=""
websocketvalue6_21=""
websocketvalue5_21=""
websocketvalue4_21=""
websocketvalue3_21=""
websocketvalue2_21=""
websocketvalue1_21="The extension trigger here is þHide Clipþ. Put in on a button with commands to hide your browsr sorce."
websocketaction21="92.000000"
websocketdelay20="0.000000"
websocketvalue8_20=""
websocketvalue7_20=""
websocketvalue6_20=""
websocketvalue5_20=""
websocketvalue4_20=""
websocketvalue3_20=""
websocketvalue2_20=""
websocketvalue1_20="The extension will automatically start a timer and send an extension trigger to hide your source. "
websocketaction20="92.000000"
websocketdelay19="1000.000000"
websocketvalue8_19=""
websocketvalue7_19=""
websocketvalue6_19=""
websocketvalue5_19=""
websocketvalue4_19=""
websocketvalue3_19="true"
websocketvalue2_19="YOUR BROWSER SOURCE NAME"
websocketvalue1_19="YOUR SCENE NAME"
websocketaction19="11.000000"
websocketdelay18="1000.000000"
websocketvalue8_18=""
websocketvalue7_18=""
websocketvalue6_18=""
websocketvalue5_18=""
websocketvalue4_18=""
websocketvalue3_18=""
websocketvalue2_18="{þurlþ:þhttps://christinna9031.github.io/Twitch-Clip-Embed/?clipid=/$clip$/þ}"
websocketvalue1_18="YOUR BROWSER SOURCE NAME"
websocketaction18="62.000000"
websocketdelay17="0.000000"
websocketvalue8_17=""
websocketvalue7_17=""
websocketvalue6_17=""
websocketvalue5_17=""
websocketvalue4_17=""
websocketvalue3_17=""
websocketvalue2_17=""
websocketvalue1_17="Load your Clip ID into Embed"
websocketaction17="92.000000"
websocketdelay16="0.000000"
websocketvalue8_16=""
websocketvalue7_16=""
websocketvalue6_16=""
websocketvalue5_16=""
websocketvalue4_16=""
websocketvalue3_16=""
websocketvalue2_16="{þurlþ:þhttps://christinna9031.github.io/Twitch-Clip-Embedþ}"
websocketvalue1_16="YOUR BROWSER SOURCE NAME"
websocketaction16="62.000000"
websocketdelay15="0.000000"
websocketvalue8_15=""
websocketvalue7_15=""
websocketvalue6_15=""
websocketvalue5_15=""
websocketvalue4_15=""
websocketvalue3_15=""
websocketvalue2_15=""
websocketvalue1_15="Force your browser to load empty page first to make sure the video refreshes correctly."
websocketaction15="92.000000"
websocketdelay14="0.000000"
websocketvalue8_14=""
websocketvalue7_14=""
websocketvalue6_14=""
websocketvalue5_14=""
websocketvalue4_14=""
websocketvalue3_14=""
websocketvalue2_14=""
websocketvalue1_14="This will auto play the clip in your OBS browser source. Uncheck þlocal fileþ in your browser settings. "
websocketaction14="92.000000"
websocketdelay13="1000.000000"
websocketvalue8_13=""
websocketvalue7_13=""
websocketvalue6_13=""
websocketvalue5_13=""
websocketvalue4_13="Hide Clip"
websocketvalue3_13="clip_duration"
websocketvalue2_13="/$clip$/"
websocketvalue1_13="Get Clip length"
websocketaction13="71.000000"
websocketdelay12="0.000000"
websocketvalue8_12=""
websocketvalue7_12=""
websocketvalue6_12=""
websocketvalue5_12=""
websocketvalue4_12=""
websocketvalue3_12=""
websocketvalue2_12=""
websocketvalue1_12="trigger = extension trigger name. It will automatically start a timer and send an extension trigger."
websocketaction12="92.000000"
websocketdelay11="1000.000000"
websocketvalue8_11=""
websocketvalue7_11=""
websocketvalue6_11=""
websocketvalue5_11=""
websocketvalue4_11=""
websocketvalue3_11=""
websocketvalue2_11=""
websocketvalue1_11="retrieves clip length. variable = variable to save the length into (in ms)"
websocketaction11="92.000000"
websocketdelay10="1000.000000"
websocketvalue8_10=""
websocketvalue7_10=""
websocketvalue6_10=""
websocketvalue5_10=""
websocketvalue4_10=""
websocketvalue3_10=""
websocketvalue2_10="clip"
websocketvalue1_10="clip"
websocketaction10="78.000000"
websocketdelay9="1000.000000"
websocketvalue8_9=""
websocketvalue7_9=""
websocketvalue6_9=""
websocketvalue5_9=""
websocketvalue4_9="1"
websocketvalue3_9="1"
websocketvalue2_9="5"
websocketvalue1_9="clip_size"
websocketaction9="23.000000"
websocketdelay8="0.000000"
websocketvalue8_8=""
websocketvalue7_8=""
websocketvalue6_8=""
websocketvalue5_8=""
websocketvalue4_8=""
websocketvalue3_8=""
websocketvalue2_8=""
websocketvalue1_8="retrieves a random clip from the stack"
websocketaction8="92.000000"
websocketdelay7="1000.000000"
websocketvalue8_7=""
websocketvalue7_7=""
websocketvalue6_7=""
websocketvalue5_7=""
websocketvalue4_7=""
websocketvalue3_7=""
websocketvalue2_7="clip_size"
websocketvalue1_7="clip"
websocketaction7="77.000000"
websocketdelay6="0.000000"
websocketvalue8_6=""
websocketvalue7_6=""
websocketvalue6_6=""
websocketvalue5_6=""
websocketvalue4_6=""
websocketvalue3_6=""
websocketvalue2_6=""
websocketvalue1_6="it is important to add some delay to let the extension retrieve all the clip urls"
websocketaction6="92.000000"
websocketdelay5="0.000000"
websocketvalue8_5=""
websocketvalue7_5=""
websocketvalue6_5=""
websocketvalue5_5="clip"
websocketvalue4_5="10"
websocketvalue3_5="/$oauth_token$/"
websocketvalue2_5="dashducks"
websocketvalue1_5="Twitch Get Clips"
websocketaction5="71.000000"
websocketdelay4="0.000000"
websocketvalue8_4=""
websocketvalue7_4=""
websocketvalue6_4=""
websocketvalue5_4=""
websocketvalue4_4=""
websocketvalue3_4=""
websocketvalue2_4=""
websocketvalue1_4="variable = variable name for clip ID. If amount > 1, clip urls will be all added to a stack instead"
websocketaction4="92.000000"
websocketdelay3="0.000000"
websocketvalue8_3=""
websocketvalue7_3=""
websocketvalue6_3=""
websocketvalue5_3=""
websocketvalue4_3=""
websocketvalue3_3=""
websocketvalue2_3=""
websocketvalue1_3="amount = amount of clips to retrieve."
websocketaction3="92.000000"
websocketdelay2="0.000000"
websocketvalue8_2=""
websocketvalue7_2=""
websocketvalue6_2=""
websocketvalue5_2=""
websocketvalue4_2=""
websocketvalue3_2=""
websocketvalue2_2=""
websocketvalue1_2="oauth token = your Twitch token"
websocketaction2="92.000000"
websocketdelay1="0.000000"
websocketvalue8_1=""
websocketvalue7_1=""
websocketvalue6_1=""
websocketvalue5_1=""
websocketvalue4_1=""
websocketvalue3_1=""
websocketvalue2_1=""
websocketvalue1_1="broadcaster name = broadcaster to retrieve clips from"
websocketaction1="92.000000"
websocketdelay0="0.000000"
websocketvalue8_0=""
websocketvalue7_0=""
websocketvalue6_0=""
websocketvalue5_0=""
websocketvalue4_0=""
websocketvalue3_0=""
websocketvalue2_0=""
websocketvalue1_0="Example of retriving a random clip and playing it as embed in your OBS Browser source"
websocketaction0="92.000000"
[configs]
name="Twitch Get Clips"
background_color="8947848.000000"
grid_height="2.000000"
grid_width="2.000000"
